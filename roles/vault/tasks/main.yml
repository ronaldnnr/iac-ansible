---
# tasks file for vault

  - name: Install Vault dependencies
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - unzip
    tags:
      - vault now

  - name: Download and extract Vault
    unarchive:
      src: "{{ vault_download_url }}"
      remote_src: yes
      dest: "{{ vault_binary_path }}"
      mode: 0755
      owner: root
      group: root
    tags:
      - vault now

  - name: Create Vault group.
    group:
      name: "{{ vault_group|lower }}"
    tags:
      - vault

  - name: Create Vault user
    user:
      name: "{{ vault_user|lower }}"
      group: "{{ vault_group|lower }}"
    tags:
      - vault

  - name: Create Vault ConfigDir and DataDir
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ vault_user|lower }}"
      group: "{{ vault_group|lower }}"
      mode: 0740
    with_items:
      - "{{ vault_config_dir|lower }}"
    tags:
      - vault

  - name: Create Vault config file
    template:
      src: vault-conf.json.j2
      dest: "{{ vault_config_dir|lower }}/vault-conf.json"
      owner: "{{ vault_user|lower }}"
      group: "{{ vault_group|lower }}"
      mode: 0640
    notify:
      - restart vault
    tags:
      - vault

  - name: Enable non root mlock capability
    command: "setcap cap_ipc_lock=+ep {{ vault_binary_path }}/vault"
    when:
      ansible_os_family == "RedHat"

  - name: Setup vault Service
    template:
      src: vault.{{ ansible_service_mgr }}.j2
      dest: "{{ (ansible_service_mgr == 'systemd') | ternary('/etc/systemd/system/vault.service', '/etc/init.d/vault') }}"
      owner: root
      group: root
      mode: "{{ (ansible_service_mgr == 'systemd') | ternary('0644', '0755') }}"
    register: vault_service
    notify:
      - restart vault
    tags:
      - vault

  - name: Create Vault directory for keys
    file:
      path: "{{ item }}"
      state: directory
    when: vault_init == "true"
    with_items:
      - "{{ vault_keys_dir|lower }}"

  - name: Create Keys vault
    shell: "{{ vault_binary_path }}/vault vault init >> {{ vault_keys_dir }}/.vault_unseal_keys"
    when: vault_init == "true"

  - name: Create list env for unseal
    shell: "cat {{ vault_keys_dir }}.vault_unseal_keys |  grep -Ei 'Unseal Key [1-3]' | cut -d: -f 2 | tr -d ' '"
    register: vault_keys
    when: vault_init == "true"

  - name: Unseal Vault
    shell: "{{ vault_binary_path }}/vault operator unseal {{ item }}"
    when: vault_init == "true"
    with_items:
      - "{{ vault_keys_output.stdout.split('\n') }}"
